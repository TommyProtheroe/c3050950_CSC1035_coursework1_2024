import java.util.ArrayList;
import java.util.List;

/**
 * Represents a car manufacturer that produces various car models.
 */
public class Manufacturer {
    private String make;
    private List<CarModel> carModels = new ArrayList<>();

    /**
     * Constructs a Manufacturer object.
     *
     * @param make The name of the manufacturer.
     */
    public Manufacturer(String make) {
        this.make = make;
    }

    /**
     * Gets the name of the manufacturer.
     *
     * @return The name of the manufacturer.
     */
    public String getMake() {
        return make;
    }

    /**
     * Gets the list of car models produced by the manufacturer.
     *
     * @return A list of CarModel objects.
     */
    public List<CarModel> getCarModels() {
        return carModels;
    }

    /**
     * Finds and returns the most expensive car model produced by the manufacturer.
     *
     * @return The CarModel with the highest sales price, or null if no models exist.
     */
    public CarModel getMostExpensiveCar() {
        if (carModels.isEmpty()) {
            return null;
        }

        CarModel mostExpensive = carModels.get(0);

        for (int i = 1; i < carModels.size(); i++) {
            if (carModels.get(i).getSalesPrice() > mostExpensive.getSalesPrice()) {
                mostExpensive = carModels.get(i);
            }
        }
        return mostExpensive;
    }

    /**
     * Calculates the total revenue generated from all cars of a given type.
     *
     * @param carType The type of car (hatchback, saloon, or estate).
     * @return The total revenue generated by selling cars of the specified type.
     */
    public double getTotalRevenue(String carType) {
        double totalRevenue = 0.0;

        for (int i = 0; i < carModels.size(); i++) {
            if (carModels.get(i).getType().equals(carType)) {
                totalRevenue += carModels.get(i).getSalesPrice() * carModels.get(i).getNumberSold();
            }
        }
        return totalRevenue;
    }

    /**
     * Retrieves a list of all car models produced by the manufacturer that have a sales price
     * greater than a specified amount.
     *
     * @param minPrice The minimum price threshold.
     * @return A list of CarModel objects that have a price above the given value.
     */
    public List<CarModel> getCarModelsAbovePrice(double minPrice) {
        List<CarModel> expensiveCars = new ArrayList<>();

        for (int i = 0; i < carModels.size(); i++) {
            if (carModels.get(i).getSalesPrice() > minPrice) {
                expensiveCars.add(carModels.get(i));
            }
        }
        return expensiveCars;
    }
}
